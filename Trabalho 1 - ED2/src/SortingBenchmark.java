import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.*;
import javafx.stage.Stage;
import java.util.List;

public class SortingBenchmark extends Application {

    @Override
    public void start(Stage stage) {
        stage.setTitle("Desempenho de Algoritmos de Ordenação");

        // Criando o gráfico
        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("Algoritmo");
        yAxis.setLabel("Tempo (ns)");

        final BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        barChart.setTitle("Comparação de Desempenho");

        // Dados para os algoritmos
        XYChart.Series<String, Number> series = new XYChart.Series<>();
        series.setName("Tempo de Execução");

        // Adicione os tempos medidos
        series.getData().add(new XYChart.Data<>("Bubble Sort", benchmarkBubbleSort()));
        series.getData().add(new XYChart.Data<>("Insertion Sort", benchmarkInsertionSort()));
        series.getData().add(new XYChart.Data<>("Merge Sort", benchmarkMergeSort()));
        series.getData().add(new XYChart.Data<>("Standard QuickSort", benchmarkStandardQuickSort()));
        series.getData().add(new XYChart.Data<>("Stable QuickSort", benchmarkStableQuickSort()));
        series.getData().add(new XYChart.Data<>("Timsort", benchmarkTimsort()));

        barChart.getData().add(series);

        Scene scene = new Scene(barChart, 800, 600);
        stage.setScene(scene);
        stage.show();
    }
/*
    //Formatar o tempo com base no valor
    private Number formatTime(long timeInNs){
        if(timeInNs>1_000_000){
            return timeInNs/1_000_000; //Converte para milissegundos
        }
        return timeInNs; //Retorna em nanossegundos
    }
*/
    // Métodos para benchmarking
    private long benchmarkBubbleSort() {
        int[] arr = {43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}; // Array fixo para teste
        BubbleSort.resetCounters(); // Reseta os contadores
        long startTime = System.nanoTime();
        BubbleSort.sort(arr); // Chama a classe externa BubbleSort
        long endTime = System.nanoTime();
        System.out.println("Bubble Sort - Comparações: " + BubbleSort.getComparisonCount() + ", Trocas: " + BubbleSort.getSwapCount());
        return (endTime - startTime); // Retorna em nanosegundos
    }

    private long benchmarkInsertionSort() {
        int[] arr = {43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}; // Array fixo para teste
        InsertionSort.resetCounters(); // Reseta os contadores
        long startTime = System.nanoTime();
        InsertionSort.sort(arr); // Chama a classe externa InsertionSort
        long endTime = System.nanoTime();
        System.out.println("Insertion Sort - Comparações: " + InsertionSort.getComparisonCount() + ", Trocas: " + InsertionSort.getSwapCount());
        return (endTime - startTime);
    }

    private long benchmarkMergeSort() {
        int[] arr = {43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}; // Array fixo para teste
        MergeSort.resetCounters(); // Reseta os contadores
        long startTime = System.nanoTime();
        MergeSort.sort(arr, 0, arr.length - 1); // Chama a classe externa MergeSort
        long endTime = System.nanoTime();
        System.out.println("Merge Sort - Comparações: " + MergeSort.getComparisonCount() + ", Trocas: " + MergeSort.getSwapCount());
        return (endTime - startTime);
    }

    private long benchmarkStandardQuickSort() {
        int[] arr = {43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}; // Array fixo para teste
        StandardQuickSort.resetCounters(); // Reseta os contadores
        long startTime = System.nanoTime();
        StandardQuickSort.sort(arr, 0, arr.length - 1); // Chama a classe externa StandardQuickSort
        long endTime = System.nanoTime();
        System.out.println("Standard QuickSort - Comparações: " + StandardQuickSort.getComparisonCount() + ", Trocas: " + StandardQuickSort.getSwapCount());
        return (endTime - startTime);
    }

    private long benchmarkStableQuickSort() {
        List<StableQuickSort.Element> arr = StableQuickSort.generateElementList(new int[]{43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}); // Lista fixa para teste
        StableQuickSort.resetCounters(); // Reseta os contadores
        long startTime = System.nanoTime();
        StableQuickSort.sort(arr, 0, arr.size() - 1); // Chama a classe externa StableQuickSort
        long endTime = System.nanoTime();
        System.out.println("Stable QuickSort - Comparações: " + StableQuickSort.getComparisonCount() + ", Trocas: " + StableQuickSort.getSwapCount());
        return (endTime - startTime);
    }

    private long benchmarkTimsort(){
        int[] arr = {43, 21, 67, 43, 89, 21, 45, 67, 43, 12, 45, 78, 21, 34, 67, 56, 12, 34, 89, 56,
                78, 21, 34, 43, 67, 21, 89, 45, 12, 56, 78, 34, 21, 67, 43, 89, 45, 78, 56, 34,
                21, 43, 67, 89, 12, 78, 56, 34, 21, 45, 67, 89, 43, 12, 45, 56, 78, 21, 34, 67,
                43, 89, 21, 12, 45, 78, 56, 34, 67, 43, 21, 89, 45, 12, 34, 56, 78, 43, 21, 67,
                89, 12, 45, 34, 56, 78, 21, 43, 67, 45, 89, 12, 34, 56, 21, 78, 43, 67, 89, 45,
                12, 34, 78, 56, 21, 43, 67, 12, 45, 89, 34, 78, 56, 21, 43, 67, 45, 12, 89, 78,
                34, 21, 43, 56, 67, 12, 89, 45, 78, 21, 34, 67, 43, 56, 12, 89, 45, 78, 21, 34,
                67, 12, 56, 89, 45, 78, 21, 34, 43, 67, 12, 56, 45, 78, 21, 34, 89, 67, 12, 43,
                56, 45, 21, 78, 34, 89, 12, 67, 43, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56,
                45, 78, 34, 12, 43, 67, 89, 21, 56, 45, 78, 34, 12, 43, 67, 21, 89, 56, 78, 34,
                45, 12, 43, 67, 89, 21, 78, 34, 12, 45, 43, 56, 67, 89, 21, 78, 12, 34, 45, 43,
                67, 89, 21, 12, 78, 34, 56, 45, 43, 67, 89, 21, 34, 78, 56, 12, 45, 43, 67, 21,
                89, 78, 34, 12, 45, 56, 67, 43, 21, 89, 12, 45, 78, 34, 56, 21, 67, 43, 45, 12,
                89, 34, 56, 78, 21, 43, 67, 89, 12, 34, 45, 21, 78, 43, 56, 67, 89, 12, 34, 21,
                45, 78, 67, 43, 56, 12, 89, 21, 78, 34, 45, 67, 43, 12, 21, 56, 78, 89, 34, 67,
                12, 21, 45, 78, 43, 56, 67, 34, 89, 21, 45, 12, 43, 67, 78, 89, 34, 21, 45, 56,
                78, 43, 12, 34, 67, 89, 21, 78, 45, 56, 34, 12, 43, 67, 89, 78, 21, 34, 12, 45,
                56, 78, 43, 67, 21, 12, 34, 45, 56, 78, 67, 21, 12, 43, 34, 56, 78, 45, 12, 67,
                21, 34, 43, 56, 78, 12, 67, 21, 34, 43, 45, 78, 67, 12, 21, 56, 34, 43, 45, 78,
                67, 21, 12, 34, 56, 43, 45, 21, 67, 78, 34, 12, 43, 45, 21, 56, 67, 78, 34, 12,
                43, 45, 67, 21, 56, 78, 34, 12, 43, 21, 45, 67, 56, 34, 78, 12, 43, 21, 45, 67,
                34, 56, 78, 43, 12, 21, 45, 67, 34, 56, 78, 12, 43, 21, 45, 67, 34, 56, 78, 12,
                43, 21, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67,
                34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12, 21, 43, 45, 67, 34, 56, 78, 12}; //Array fixo para teste
        Timsort.resetCounters();//Reseta os contadores
        long startTime = System.nanoTime();
        Timsort.sort(arr); //Chama a classe externa Timsort
        long endTime = System.nanoTime();
        System.out.println("Timsort - Comparações: " + Timsort.getComparisonCount() + ", Trocas: " + Timsort.getSwapCount());
        return(endTime - startTime);
    }

    public static void main(String[] args) {
        launch(args);
    }
}
